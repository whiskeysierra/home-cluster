#!/bin/bash

set -euo pipefail

root() {
  git rev-parse --show-toplevel
}

kubectl-apply() {
  kubectl apply "$@"
}

kubectl-wait() {
  kubectl wait "$@"
}

workloads() {
  kubectl get deployments,daemonsets,statefulsets --namespace "$1" -o json | \
      jq -r '.items[] | (.kind | ascii_downcase) + "/" + .metadata.name'
}

wait-for() {
  echo "Waiting for '$1' rollout..."
  workloads "$1" | while read -r workload; do
    kubectl rollout status "$workload" --namespace "$1" --timeout=120s
  done
}

deploy() {
  directory=$1
  component="$(realpath --relative-to="$(root)" "$directory")"
  namespace="$(basename "$directory")"
  echo "Deploying '$component'..."
  kustomize build --enable-alpha-plugins "$directory" | kubectl-apply -f -
  wait-for "$namespace"
}

defaults() {
  base="$(root)"
  grep "^[^#;]" "$base/components.lst" | awk '{print "'"$base"'/" $0}'
}

PARAMS=""
dry_run=false

while [ $# -gt 0 ]; do
  case "$1" in
    -d | --dry-run)
      dry_run=true
      shift
      ;;
    -*) # unsupported flags
      echo "Error: Unsupported flag $1" >&2
      exit 1
      ;;
    *) # preserve positional arguments
      PARAMS="$PARAMS $1"
      shift
      ;;
  esac
done

# set positional arguments in their proper place
eval set -- "$PARAMS"

components="${*:-$(defaults)}"

if $dry_run; then
  kubectl-apply() {
    cat > /dev/null
  }
  kubectl-wait() {
    :
  }
fi

for component in $components; do
  deploy "$component"
done
